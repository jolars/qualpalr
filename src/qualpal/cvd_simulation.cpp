#include "colors.h"
#include "matrix.h"
#include <cmath>

namespace qualpal {

std::vector<RGB>
simulate_cvd(const std::vector<RGB>& rgb,
             const std::string cvd_type,
             double cvd_severity)
{
  cvd_severity *= 10;

  int fl = static_cast<int>(std::floor(cvd_severity));
  int ce = static_cast<int>(std::ceil(cvd_severity));

  std::array<FixedMatrix<double, 3, 3>, 11> cvd_mats;

  if (cvd_type == "protan") {
    cvd_mats = { { { { 1, 0, 0 }, { 0, 1, 0 }, { 0, 0, 1 } },
                   { { 0.856, 0.182, -0.038 },
                     { 0.029, 0.955, 0.016 },
                     { -0.003, -0.002, 1.004 } },
                   { { 0.735, 0.335, -0.070 },
                     { 0.052, 0.919, 0.029 },
                     { -0.005, -0.004, 1.009 } },
                   { { 0.630, 0.466, -0.096 },
                     { 0.069, 0.890, 0.041 },
                     { -0.006, -0.008, 1.014 } },
                   { { 0.539, 0.579, -0.118 },
                     { 0.083, 0.866, 0.051 },
                     { -0.007, -0.012, 1.019 } },
                   { { 0.458, 0.680, -0.138 },
                     { 0.093, 0.846, 0.061 },
                     { -0.007, -0.017, 1.024 } },
                   { { 0.385, 0.769, -0.154 },
                     { 0.101, 0.830, 0.070 },
                     { -0.007, -0.022, 1.030 } },
                   { { 0.320, 0.850, -0.169 },
                     { 0.106, 0.816, 0.078 },
                     { -0.007, -0.028, 1.035 } },
                   { { 0.259, 0.923, -0.182 },
                     { 0.110, 0.804, 0.085 },
                     { -0.006, -0.034, 1.041 } },
                   { { 0.204, 0.990, -0.194 },
                     { 0.113, 0.795, 0.092 },
                     { -0.005, -0.041, 1.046 } },
                   { { 0.152, 1.053, -0.205 },
                     { 0.115, 0.786, 0.099 },
                     { -0.004, -0.048, 1.052 } } } };
  } else if (cvd_type == "deutan") {
    cvd_mats = { { { { 1, 0, 0 }, { 0, 1, 0 }, { 0, 0, 1 } },
                   { { 0.866, 0.178, -0.044 },
                     { 0.050, 0.939, 0.011 },
                     { -0.003, 0.007, 0.996 } },
                   { { 0.761, 0.319, -0.080 },
                     { 0.091, 0.889, 0.020 },
                     { -0.006, 0.013, 0.993 } },
                   { { 0.675, 0.434, -0.109 },
                     { 0.125, 0.848, 0.027 },
                     { -0.008, 0.019, 0.989 } },
                   { { 0.606, 0.529, -0.134 },
                     { 0.155, 0.812, 0.032 },
                     { -0.009, 0.023, 0.986 } },
                   { { 0.547, 0.608, -0.155 },
                     { 0.182, 0.782, 0.037 },
                     { -0.010, 0.027, 0.983 } },
                   { { 0.499, 0.675, -0.174 },
                     { 0.205, 0.755, 0.040 },
                     { -0.011, 0.031, 0.980 } },
                   { { 0.458, 0.732, -0.190 },
                     { 0.226, 0.731, 0.043 },
                     { -0.012, 0.034, 0.977 } },
                   { { 0.423, 0.781, -0.204 },
                     { 0.246, 0.710, 0.045 },
                     { -0.012, 0.037, 0.974 } },
                   { { 0.393, 0.824, -0.217 },
                     { 0.264, 0.690, 0.046 },
                     { -0.012, 0.040, 0.972 } },
                   { { 0.367, 0.861, -0.228 },
                     { 0.280, 0.673, 0.047 },
                     { -0.012, 0.043, 0.969 } } } };
  } else if (cvd_type == "tritan") {
    cvd_mats = { { { { 1, 0, 0 }, { 0, 1, 0 }, { 0, 0, 1 } },
                   { { 0.927, 0.093, -0.019 },
                     { 0.021, 0.965, 0.014 },
                     { 0.008, 0.055, 0.937 } },
                   { { 0.896, 0.133, -0.029 },
                     { 0.030, 0.945, 0.025 },
                     { 0.013, 0.105, 0.882 } },
                   { { 0.906, 0.128, -0.034 },
                     { 0.027, 0.941, 0.032 },
                     { 0.013, 0.148, 0.838 } },
                   { { 0.948, 0.089, -0.038 },
                     { 0.014, 0.947, 0.039 },
                     { 0.011, 0.194, 0.795 } },
                   { { 1.017, 0.027, -0.044 },
                     { -0.006, 0.958, 0.048 },
                     { 0.006, 0.249, 0.745 } },
                   { { 1.105, -0.047, -0.058 },
                     { -0.032, 0.972, 0.061 },
                     { 0.001, 0.318, 0.681 } },
                   { { 1.193, -0.110, -0.083 },
                     { -0.058, 0.979, 0.079 },
                     { -0.002, 0.403, 0.599 } },
                   { { 1.258, -0.140, -0.118 },
                     { -0.078, 0.975, 0.103 },
                     { -0.003, 0.501, 0.502 } },
                   { { 1.279, -0.125, -0.154 },
                     { -0.085, 0.958, 0.127 },
                     { -0.001, 0.601, 0.400 } },
                   { { 1.256, -0.077, -0.179 },
                     { -0.078, 0.931, 0.148 },
                     { 0.005, 0.691, 0.304 } } } };
  }

  FixedMatrix<double, 3, 3> cvd_mat_lo = cvd_mats[fl];
  FixedMatrix<double, 3, 3> cvd_mat_hi = cvd_mats[ce];

  // interpolate cvd matrix
  FixedMatrix<double, 3, 3> cvd_mat =
    cvd_mat_lo +
    (cvd_mat_hi - cvd_mat_lo) * (static_cast<double>(ce) - cvd_severity);

  std::vector<RGB> rgb_out;
  for (auto col : rgb) {
    std::array<double, 3> rgb_vec = { col.r(), col.g(), col.b() };
    std::array<double, 3> rgb_cvd = cvd_mat * rgb_vec;
    rgb_out.emplace_back(rgb_cvd[0], rgb_cvd[1], rgb_cvd[2]);
  }

  return rgb_out;
}

} // namespace qualpal
